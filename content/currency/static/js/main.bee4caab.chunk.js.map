{"version":3,"sources":["Hello.js","List.js","Apptest.js","serviceWorker.js","index.js"],"names":["Hello","timeNow","hours","Date","getHours","ListItem","state","completed","setChecked","bind","this","setState","props","code","bid","ask","onClick","func","React","Component","List","allCurrencies","currencies","addCurrency","removeCurrency","event","concat","target","id","className","filter","currency","fetch","then","response","json","data","rates","Row","Col","lg","Container","map","allCurrenciesListItem","itemNum","style","width","height","key","Table","Apptest","styles","color","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAoBeA,EAlBD,WACb,IAEIC,EADEC,GADO,IAAIC,MACEC,WAWnB,OAPCH,EADEC,EAAQ,GACA,UACFA,GAAS,IAAMA,EAAQ,GACrB,YAEA,QAIV,oCAAUD,EAAV,M,uCCbII,E,YACJ,aAAc,IAAD,8BACX,+CACKC,MAAM,CACTC,UAAW,IAEb,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBALP,E,0EAQXC,KAAKC,SAAS,SAAAL,GAAK,MAAG,CAACC,WAAYD,EAAMC,e,+BAGzC,OACA,4BACI,4BACGG,KAAKE,MAAMC,MAEd,4BACGH,KAAKE,MAAME,KAEd,4BACGJ,KAAKE,MAAMG,KAEd,4BACE,4BAAQC,QAASN,KAAKE,MAAMK,MAA5B,W,GAxBaC,IAAMC,WAwGdC,E,YAxEb,aAAc,IAAD,8BACX,+CACKd,MAAQ,CACXe,cAAe,GACfC,WAAY,IAEd,EAAKC,YAAc,EAAKA,YAAYd,KAAjB,gBACnB,EAAKe,eAAiB,EAAKA,eAAef,KAApB,gBAPX,E,yEAUDgB,GACVf,KAAKC,SAAS,CAACW,WAAYZ,KAAKJ,MAAMgB,WAAWI,OAAOD,EAAME,OAAOC,MACpEH,EAAME,OAAOE,UAAY,8B,qCAEbD,GACblB,KAAKC,SAAS,CAACW,WAAYZ,KAAKJ,MAAMgB,WAAWQ,OAAO,SAAAC,GAAQ,OAAIA,IAAaH,Q,0CAG/D,IAAD,OAEjBI,MADiB,6DAEdC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAI,EAAKzB,SAAS,CAACU,cAAee,EAAK,GAAGC,Y,+BAG/C,IAAD,OACP,OACG,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,qDACF,kBAACC,EAAA,EAAD,CAAWZ,UAAU,2CACjBnB,KAAKJ,MAAMe,cAAcqB,IACrB,SAACC,EAAsBC,GAAvB,OAAmC,4BACjCC,MAAO,CAACC,MAAM,OAAOC,OAAO,QAC5BlB,UAAU,0BACVb,QAAS,EAAKO,YACdyB,IAAKJ,EACLhB,GAAIgB,GAEHD,EAAsB9B,UAIjC,kBAAC0B,EAAA,EAAD,CAAKC,GAAG,MAER,kBAACD,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACS,EAAA,EAAD,KACE,+BACE,4BACE,wCACA,mCACA,mCACA,+BAGJ,+BACGvC,KAAKJ,MAAMgB,WAAWoB,IACrB,SAACX,EAASiB,GAAV,OAAkB,kBAAC,EAAD,CAChBA,IAAMA,EACNnC,KAAO,EAAKP,MAAMe,cAAcU,GAAUlB,KAC1CC,IAAO,EAAKR,MAAMe,cAAcU,GAAUjB,IAC1CC,IAAO,EAAKT,MAAMe,cAAcU,GAAUhB,IAC1CE,KAAQ,kBAAI,EAAKO,eAAeO,gB,GA/D7Bb,IAAMC,WCfV+B,E,iLAbX,IAAIC,EAAS,CACXC,MAAO1C,KAAKE,MAAMwC,MAClBC,UAAU,UAEZ,OACE,yBAAKR,MAAOM,GACV,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GATcjC,IAAMC,WCQRmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,CAASR,MAAM,QAASS,SAASC,eAAe,SD0H1D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC,iB","file":"static/js/main.bee4caab.chunk.js","sourcesContent":["import React from 'react';\n\nconst Hello = () => {\n\tconst date = new Date();\n\tconst hours = date.getHours();\n\tlet timeNow;\n\n\tif(hours < 11){\n\t\ttimeNow = \"morning\"\n\t}else if(hours >= 11 && hours < 18){\n\t\ttimeNow = \"afternoon\"\n\t}else{\n\t\ttimeNow = \"night\"\n\t}\n\n\treturn (\n\t\t<h2>Good {timeNow}!</h2>\n\t)\n}\n\nexport default Hello;","import React from 'react';\nimport { Table, Col, Row, Container } from 'react-bootstrap';\n\nclass ListItem extends React.Component{\n  constructor(){\n    super()\n    this.state={\n      completed: ''\n    }\n    this.setChecked = this.setChecked.bind(this)\n  }\n  setChecked(){\n    this.setState(state=>({completed: !state.completed}))\n  }\n\trender(){\n    return(\n  \t\t<tr>\n        <td>\n          {this.props.code}\n        </td>\n        <td>\n          {this.props.bid}\n        </td>\n        <td>\n          {this.props.ask}\n        </td>\n        <td>\n          <button onClick={this.props.func}>X</button>\n        </td>\n  \t\t</tr>\n  \t)\n  }\n}\n\nclass List extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      allCurrencies: [],\n      currencies: [],\n    }\n    this.addCurrency = this.addCurrency.bind(this);\n    this.removeCurrency = this.removeCurrency.bind(this);\n  }\n\n  addCurrency(event){\n    this.setState({currencies: this.state.currencies.concat(event.target.id)});\n     event.target.className = 'p-1 m-2 btn btn-secondary';\n  }\n  removeCurrency(id){\n    this.setState({currencies: this.state.currencies.filter(currency => currency !== id)})\n  }\n\n  componentDidMount(){\n    const requestA = 'http://api.nbp.pl/api/exchangerates/tables/C/?format=json';\n    fetch(requestA)\n      .then(response => response.json())\n      .then(data => this.setState({allCurrencies: data[0].rates}));\n  }\n\n  render(){\n  \treturn(\n      <Row>\n      <Col lg=\"3\">\n        <p>Choose your currencies</p>\n    \t\t<Container className=\"d-flex flex-wrap justify-content-center\" >\n      \t\t\t{this.state.allCurrencies.map(\n              (allCurrenciesListItem,itemNum) => <button \n                style={{width:'45px',height:'35px'}} \n                className=\"p-1 m-2 btn btn-primary\" \n                onClick={this.addCurrency} \n                key={itemNum}\n                id={itemNum}\n              >\n                {allCurrenciesListItem.code}</button>\n            )}\n        </Container>\n      </Col>\n      <Col lg=\"1\">\n      </Col>\n      <Col lg=\"4\">\n        <Table>\n          <thead>\n            <tr>\n              <th>Currency</th>\n              <th>Bid</th>\n              <th>Ask</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.currencies.map(\n              (currency,key) => <ListItem \n                key= {key} \n                code= {this.state.allCurrencies[currency].code} \n                bid = {this.state.allCurrencies[currency].bid}\n                ask = {this.state.allCurrencies[currency].ask}\n                func = {()=>this.removeCurrency(currency)} />\n            )}\n          </tbody>\n        </Table>\n      </Col>\n      </Row>\n  \t)\n  }\n}\n\nexport default List;","import React from 'react';\nimport Hello from './Hello';\nimport List from './List';\n\nclass Apptest extends React.Component{\n  render(){\n    var styles = {\n      color: this.props.color,\n      textAlign:\"center\"\n    }\n    return(\n      <div style={styles}>\n        <Hello />\n        <List/>\n      </div>\n    )\n  }\n}\n\nexport default Apptest;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import App from './App';\nimport Apptest from './Apptest';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Apptest color=\"red\"/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}