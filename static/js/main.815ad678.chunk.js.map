{"version":3,"sources":["serviceWorker.js","country/Map.jsx","country/PhotoOverview.jsx","country/Header.jsx","country/CityScroll.jsx","country/Weather.jsx","country/index.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Map","selectedCity","style","height","width","bootstrapURLKeys","key","defaultCenter","lat","lng","defaultZoom","PhotoOverview","useState","photos","setPhotos","useEffect","fetch","then","data","json","obj","candidates","place_id","placeId","imgs","result","display","flexWrap","slice","map","photo","k","src","photo_reference","Weather","Country","country","setSelectedCity","cities","setCities","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCXS,SAASC,EAAT,GAA4B,EAAdC,aAU5B,OACC,yBAAKC,MAAO,CAAEC,OAAQ,QAASC,MAAO,UAChC,kBAAC,IAAD,CACEC,iBAAkB,CAACC,IAfnB,2CAgBAC,cAAe,CACpBC,IAAK,MACLC,IAAK,OAEAC,YAAa,KCvBvB,IAAIJ,EAAM,0CAEK,SAASK,EAAT,GAAuC,IAAfV,EAAc,EAAdA,aAAc,EACxBW,mBAAS,IADe,mBAC7CC,EAD6C,KACrCC,EADqC,KAiBpD,OAdAC,qBAAU,WACTC,MAAM,8GAAD,OAA+GV,EAA/G,kBAA4HL,EAA5H,yBACJgB,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAChBF,MAAK,SAAAG,GAAG,OAAEA,EAAIC,WAAW,GAAGC,YAC5BL,MAAK,SAAAM,GAAO,OACZP,MAAM,+DAAD,OAAgEV,EAAhE,qBAAgFiB,EAAhF,mBACJN,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAChBF,MAAK,SAAAO,GAAI,OAAEV,EAAUU,EAAKC,OAAOZ,gBAGlC,CAACZ,IAKF,yBAAKC,MAAO,CAACE,MAAM,QAASD,OAAO,QAASuB,QAAQ,OAAQC,SAAS,SACnEd,EAAOe,MAAM,EAAE,GAAGC,KAAI,SAACC,EAAMC,GAAP,OAAW,yBAAKzB,IAAKyB,EAAGC,IAAG,gEAA2D1B,EAA3D,2BAAiFwB,EAAMG,gBAAvF,wBCnBtC,SAASC,EAAT,GAAgC,EAAdjC,aAAe,IAAD,EACdW,mBAAS,IADK,6BAY9C,OACC,yBAAKV,MAAO,CAACC,OAAO,UAApB,UCba,SAAS+B,EAAT,GAAgC,EAAdjC,aAAe,IAAD,EACdW,mBAAS,IADK,6BAY9C,OACC,yBAAKV,MAAO,CAACE,MAAM,QAASD,OAAO,UAAnC,cCba,SAAS+B,EAAT,GAAgC,EAAdjC,aAAe,IAAD,EACdW,mBAAS,IADK,6BAY9C,OACC,yBAAKV,MAAO,CAACE,MAAM,QAASD,OAAO,UAAnC,YCVa,SAASgC,EAAT,GAAoC,IAAD,IAAjBC,eAAiB,MAAT,QAAS,IACTxB,mBAAS,SADA,mBAC1CX,EAD0C,KAC5BoC,EAD4B,OAErBzB,mBAAS,IAFY,mBAE1C0B,EAF0C,KAElCC,EAFkC,KAWjD,OACC,6BACC,kBAAC,EAAD,CACCH,QAASA,EACTE,OAAQA,EACRrC,aAAcA,EACdsC,UAAWA,IAEZ,yBAAKrC,MAAO,CAACwB,QAAQ,SACpB,kBAAC,EAAD,CACCY,OAAQA,EACRD,gBAAiBA,IAElB,kBAACrC,EAAD,CACCC,aAAcA,IAEf,6BACC,kBAACU,EAAD,CACCV,aAAcA,IAEf,kBAAC,EAAD,CACCA,aAAcA,OC9BpBuC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACP,EAAD,OAEFQ,SAASC,eAAe,SPsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.815ad678.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React,{useState, useEffect} from 'react';\nimport GoogleMapReact from 'google-map-react';\n\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n\nlet key = 'AIzaSyAHFPJKrF1QQqSmFHWJPUFeKPNkD1dIRwU';\n\nexport default function Map({selectedCity}){\n\n\t// useEffect(()=>{\n\t// \tfetch('some google API'+selectedCity,{\n\t// \t\tmethod:'POST',\n\t// \t\tkey:APIkey\n\t// \t})\n\t// \t.then(()=>)\n\t// },[selectedCity])\n\n\treturn(\n\t\t<div style={{ height: '300px', width: '650px' }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{key}}\n          defaultCenter={{\n\t\t\t  lat: 59.95,\n\t\t\t  lng: 30.33\n\t\t\t}}\n          defaultZoom={8}\n        >\n          {/*<AnyReactComponent\n            lat={59.955413}\n            lng={30.337844}\n            text=\"My Marker\"\n          />*/}\n        </GoogleMapReact>\n      </div>\n\t)\n}","import React,{useState, useEffect} from 'react';\n\nlet key = 'AIzaSyAHFPJKrF1QQqSmFHWJPUFeKPNkD1dIRwU';\n\nexport default function PhotoOverview({selectedCity}){\n\tconst [photos, setPhotos] = useState([])\n\n\tuseEffect(()=>{\n\t\tfetch(`https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/findplacefromtext/json?&key=${key}&input=${selectedCity}&inputtype=textquery`)\n\t\t.then(data=>data.json())\n\t\t.then(obj=>obj.candidates[0].place_id)\n\t\t.then(placeId=>\n\t\t\tfetch(`https://maps.googleapis.com/maps/api/place/details/json?key=${key}&place_id=${placeId}&fields=photos`)\n\t\t\t.then(data=>data.json())\n\t\t\t.then(imgs=>setPhotos(imgs.result.photos))\n\n\t\t)\n\t},[selectedCity])\n\n\n\n\treturn(\n\t\t<div style={{width:'220px', height:'220px', display:'flex', flexWrap:'wrap'}}>\n\t\t\t{photos.slice(0,4).map((photo,k)=><img key={k} src={`https://maps.googleapis.com/maps/api/place/photo?&key=${key}&photoreference=${photo.photo_reference}&maxheight=200`} />)}\n\t\t</div>\n\t)\n}","import React,{useState, useEffect} from 'react';\n\nlet APIkey = 'your API KEY';\n\nexport default function Weather({selectedCity}){\n\tconst [forecast, setForecast] = useState({})\n\n\t// useEffect(()=>{\n\t// \tfetch('some weather API'+selectedCity,{\n\t// \t\tmethod:'POST',\n\t// \t\tkey:APIkey\n\t// \t})\n\t// \t.then((data)=>data.json())\n\t// \t.then(data=>setForecast(data))\n\t// },[selectedCity])\n\n\treturn(\n\t\t<div style={{height:'100px'}}>\n\t\t\tHeader\n\t\t\t{/* weather component*/}\n\t\t</div>\n\t)\n}","import React,{useState, useEffect} from 'react';\n\nlet APIkey = 'your API KEY';\n\nexport default function Weather({selectedCity}){\n\tconst [forecast, setForecast] = useState({})\n\n\t// useEffect(()=>{\n\t// \tfetch('some weather API'+selectedCity,{\n\t// \t\tmethod:'POST',\n\t// \t\tkey:APIkey\n\t// \t})\n\t// \t.then((data)=>data.json())\n\t// \t.then(data=>setForecast(data))\n\t// },[selectedCity])\n\n\treturn(\n\t\t<div style={{width:'100px', height:'100vh'}}>\n\t\t\tCityScroll\n\t\t\t{/* weather component*/}\n\t\t</div>\n\t)\n}","import React,{useState, useEffect} from 'react';\n\nlet APIkey = 'your API KEY';\n\nexport default function Weather({selectedCity}){\n\tconst [forecast, setForecast] = useState({})\n\n\t// useEffect(()=>{\n\t// \tfetch('some weather API'+selectedCity,{\n\t// \t\tmethod:'POST',\n\t// \t\tkey:APIkey\n\t// \t})\n\t// \t.then((data)=>data.json())\n\t// \t.then(data=>setForecast(data))\n\t// },[selectedCity])\n\n\treturn(\n\t\t<div style={{width:'220px', height:'100px'}}>\n\t\t\tWheather\n\t\t\t{/* weather component*/}\n\t\t</div>\n\t)\n}","import React,{useState, useEffect} from 'react';\nimport Map from './Map';\nimport PhotoOverview from './PhotoOverview';\nimport Header from './Header';\nimport CityScroll from './CityScroll';\nimport Weather from './Weather';\n\nexport default function Country({country='Japan'}){\n\tconst [selectedCity, setSelectedCity] = useState('Paris');\n\tconst [cities, setCities] = useState([])\n\n\t// useEffect(()=>{\n\t// \tfetch('recive citilist'+country)\n\t// \t.then(data=>data.json())\n\t// \t.then(data=>setCities(data))\n\t// },[])\n\n\n\treturn(\n\t\t<div>\n\t\t\t<Header \n\t\t\t\tcountry={country}\n\t\t\t\tcities={cities}\n\t\t\t\tselectedCity={selectedCity}\n\t\t\t\tsetCities={setCities}\n\t\t\t/>\n\t\t\t<div style={{display:'flex'}}>\n\t\t\t\t<CityScroll \n\t\t\t\t\tcities={cities}\n\t\t\t\t\tsetSelectedCity={setSelectedCity}\n\t\t\t\t/>\n\t\t\t\t<Map \n\t\t\t\t\tselectedCity={selectedCity}\n\t\t\t\t/>\n\t\t\t\t<div>\n\t\t\t\t\t<PhotoOverview \n\t\t\t\t\t\tselectedCity={selectedCity}\n\t\t\t\t\t/>\n\t\t\t\t\t<Weather \n\t\t\t\t\t\tselectedCity={selectedCity}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import App from './App';\nimport Country from './country';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Country />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}